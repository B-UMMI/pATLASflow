// config to run pATLAS_mash_screen.nf script
manifest {
    author = "Tiago F. Jesus"
    description = "This Nextflow pipeline is an implementation of mash-wrapper.py " +
        "and PlasmidUNCover.py. It will output a JSON file that can be " +
        "imported into pATLAS."
}

// sets PYTHONPATH for utils to be available for templates
env {
    PYTHONPATH = "$baseDir/templates"
}

//manifest.mainScript = 'main.nf'

// default values for params
params {
    threads = 1
    kMer = 21
    pValue = 0.05
    identity = 0.9
    mash_distance = 0.1
    noWinner = false
    //bowtie2 unique options
    max_k = 10949   // sets k parameter of bowtie2 -k, allowing the same read to map against more than 1 read. Default value is 1.
    trim5 = 0
    cov_cutoff = 0.60    // cutoff for the coverage in mapping approach
    reads = 'reads/*_{1,2}.fastq*' //this expects that fastq.gz files are in reads folder
    fasta = 'fasta/*.fas' //home/data
    plasmid_length_dict ='jsons/*_length.json'
    mash_screen = false  //boolean to run mash screen. By default it is true
    mapping = false     //boolean to check if mapping approach is enabled. By default it is false
    assembly = false    //boolean to run assembly based mash dist. By default it is set to false
    singleEnd = false
    help = false
    version = 0.1
}

process {
    $mashScreen.container = 'tiagofilipe12/patlasflow_mash_screen:1.0.2'
    $mashOutputJson.container = 'tiagofilipe12/patlasflow_mash_screen:1.0.2'
    $runMashDist.container = 'tiagofilipe12/patlasflow_mash_screen:1.0.2'
    $mashDistOutputJson.container = 'tiagofilipe12/patlasflow_mash_screen:1.0.2'
    $mappingBowtie.container = 'tiagofilipe12/patlasflow_mapping:1.0.3'
    $samtoolsView.container = 'tiagofilipe12/patlasflow_mapping:1.0.3'
    $jsonDumpingMapping.container = 'tiagofilipe12/patlasflow_mapping:1.0.3'
    $fullConsensus.container = 'tiagofilipe12/patlasflow_mapping:1.0.3'
}

// this should be passed with the -profile mash_screen
profiles {
    // standard uses executor local and docker
    standard {
        docker.enabled = true
    }
    singularity {
        singularity.enabled = true
    }
    slurm {
        process.executor  = "slurm"
        shifter.enabled = true

        $mashScreen.cpu = 4
        $mashOutputJson.cpu = 1
        $runMashDist.cpu = 4
        $mashDistOutputJson.cpu = 1
        $mappingBowtie.cpu = 4
        $samtoolsView.cpu = 4
        $jsonDumpingMapping.cpu = 1
        $fullConsensus.cpu = 1

        $mashScreen.memory = { 4.GB * task.attempt }
        $mashScreen.errorStategy = { task.exitStatus == 140 ? "retry" : "terminate" }
        $mashScreen.maxRetries = 3

        $mashOutputJson.memory = "1GB"

        $runMashDist.memory = { 4.GB * task.attempt }
        $runMashDist.errorStategy = { task.exitStatus == 140 ? "retry" : "terminate" }
        $runMashDist.maxRetries = 3

        $mashDistOutputJson.memory = "1GB"

        $mappingBowtie.memory = { 6.GB * task.attempt }
        $mappingBowtie.errorStategy = { task.exitStatus == 140 ? "retry" : "terminate" }
        $mappingBowtie.maxRetries = 3

        $samtoolsView.memory = { 6.GB * task.attempt }
        $samtoolsView.errorStategy = { task.exitStatus == 140 ? "retry" : "terminate" }
        $samtoolsView.maxRetries = 3

        $jsonDumpingMapping.memory = "1GB"

        $fullConsensus.memory = "1GB"
    }
}